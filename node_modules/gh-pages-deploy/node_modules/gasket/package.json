{
  "name": "gasket",
  "version": "2.0.0",
  "description": "Preconfigured pipelines for node.js",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/datproject/gasket"
  },
  "bin": {
    "gasket": "bin.js"
  },
  "license": "BSD",
  "dependencies": {
    "debug-stream": "^2.0.2",
    "duplexify": "^3.2.0",
    "multistream": "^1.4.2",
    "ndjson": "^1.2.3",
    "npm-execspawn": "^1.0.6",
    "pumpify": "^1.3.3",
    "resolve": "^0.7.1",
    "tabalot": "^0.6.0",
    "xtend": "^3.0.0"
  },
  "gasket": {
    "test": [
      "cat -"
    ]
  },
  "bugs": {
    "url": "https://github.com/datproject/gasket/issues"
  },
  "homepage": "https://github.com/datproject/gasket",
  "devDependencies": {},
  "author": {
    "name": "Mathias Buus-Madsen",
    "url": "@mafintosh"
  },
  "readme": "# gasket\n\nPreconfigured pipelines for node.js\n\n![logo](https://raw.githubusercontent.com/datproject/gasket/master/gasket.png)\n\n```\n$ npm install -g gasket\n$ gasket # prints help\n$ gasket completion --save # install tab completion\n```\n\n## Usage\n\nTo setup a pipeline add a `gasket` section to your package.json\n\n```json\n{\n  \"name\": \"my-test-app\",\n  \"dependencies\" : {\n    \"transform-uppercase\": \"^1.0.0\"\n  },\n  \"gasket\": {\n    \"example\": [\n      \"echo hello world\",\n      \"transform-uppercase\"\n    ]\n  }\n}\n```\n\nTo run the above `example` pipeline simply to the repo and run\n\n```\n$ gasket run example # will print HELLO WORLD\n```\n\n`gasket` will spawn each command in the pipeline (it supports modules/commands installed via npm)\nand pipe them together.\n\nIf you want to wait for the previous command to finish add `null` to the pipeline\n\n```json\n{\n  \"gasket\": {\n    \"example\": [\n      \"echo hello world\",\n      null,\n      \"echo hello afterwards\"\n    ]\n  }\n}\n```\n\nRunning the above will print\n\n```\nhello world\nhello afterwards\n```\n\n## Modules in pipelines\n\nIn addition to commands it supports node modules that return streams\n\n```json\n{\n  \"gasket\": [\n    \"echo hello world\",\n    {\"module\":\"./uppercase.js\"}\n  ]\n}\n```\n\nWhere `uppercase.js` is a file that looks like this\n\n``` js\nvar through = require('through2')\nmodule.exports = function() {\n  return through(function(data, enc, cb) {\n    cb(null, data.toString().toUpperCase())\n  })\n}\n```\n\nIf your module reads/writes JSON object set `json:true` in the pipeline.\nThat will make gasket parse newline separated JSON before parsing the objects to the stream\nand stringify the output.\n\nRunning `gasket run main` will produce `HELLO WORLD`\n\n## Using gasket.json\n\nIf you don't have a package.json file you can add the tasks to a `gasket.json` file instead\n\n```json\n{\n  \"example\": [\n    \"echo hello world\",\n    \"transform-uppercase\"\n  ]\n}\n```\n\n## gasket as a module\n\nYou can use gasket as a module as well\n\n``` js\nvar gasket = require('gasket')\n\nvar pipelines = gasket({\n  example: [\n    \"echo hello world\",\n    \"transform-uppercase\"\n  ]\n})\n\npipelines.run('example').pipe(process.stdout)\n```\n",
  "readmeFilename": "readme.md",
  "_id": "gasket@2.0.0",
  "_from": "gasket@^2.0.0"
}
